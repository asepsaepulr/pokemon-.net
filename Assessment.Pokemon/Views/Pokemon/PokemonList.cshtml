@model Assessment.Pokemon.Models.Pokemon.PokemonViewModel;

@{
    ViewData["Title"] = "Home Page";
}
@section PageStyles{
    <link rel="stylesheet" href="~/css/list-pokemon.css" />
    <link rel="stylesheet" href="~/lib/datatables/css/dataTables.bootstrap4.min.css" />
}
<body class="bg-detail">
    <div class="logo-poke">
    <img src="~/img/pokemon-nobg.png" />
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table id="pokemonTable" class="datatable table table-head-custom">
                <thead>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
            <div>
                <button class="btn btn-outline-light" id="prevBtn">Previous</button>
                <span id="pageInfo">Page 1 of 1</span>
                <button class="btn btn-outline-light" id="nextBtn">Next</button>
            </div>
        </div>
    </div>
</body>
@section Scripts{
    <script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script>
        var $j = jQuery.noConflict();
        $j(document).ready(function () {
            let currentPage = 1;

            const fetchPokemonData = async (offset, limit) => {
                const response = await fetch(`https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit}`);
                const data = await response.json();
                return data.results;
            };

            const fetchPokemonDetails = async (url) => {
                const response = await fetch(url);
                return await response.json();
            };

            const populateTable = async () => {
                const offset = (currentPage - 1) * 9;
                const limit = 9;

                const pokemonData = [];

                const results = await fetchPokemonData(offset, limit);

                for (const pokemon of results) {
                    const pokemonDetail = await fetchPokemonDetails(pokemon.url);
                    pokemonData.push({
                        id: '<span>' + pokemonDetail.id + '</span>',
                        name: '<span> <a href="' + '@Url.Action("PokemonDetail", "Pokemon")?name=' + encodeURIComponent(pokemonDetail.name) + '">' + pokemonDetail.name + '</a> </span>',
                        image: `<img src="${pokemonDetail.sprites.other['official-artwork'].front_default}" alt="${pokemonDetail.name}" class="img-front">`,
                        types: '<span>' + pokemonDetail.types.map(type => type.type.name).join(', ') + '</span>',
                        abilities: '<span>' + pokemonDetail.abilities.map(ability => ability.ability.name).join(', ') + '</span>',
                    });
                }

                $('#pokemonTable').DataTable().clear().rows.add(pokemonData).draw();
                updatePageInfo();
            };

            const updatePageInfo = () => {
                const totalPages = Math.ceil(1118 / 9);
                $('#pageInfo').text(`Page ${currentPage} of ${totalPages}`);
            };

            $('#pokemonTable').DataTable({
                ordering: false,
                paging: false,
                columns: [
                    { data: 'id' },
                    { data: 'name' },
                    { data: 'image' },
                    { data: 'types' },
                    { data: 'abilities' }]
            });
            populateTable();

            $('#nextBtn').on('click', function () {
                if (currentPage < Math.ceil(1118 / 9)) {
                    currentPage++;
                    populateTable();
                }
            });

            $('#prevBtn').on('click', function () {
                if (currentPage > 1) {
                    currentPage--;
                    populateTable();
                }
            });
        });
    </script>
}
